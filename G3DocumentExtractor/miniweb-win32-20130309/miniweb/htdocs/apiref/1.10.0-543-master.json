{
  "/": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      }
    },
    "actions": {
      "remote-host": {
        "return": "string",
        "args": [],
        "help": "Return: The remote (requesting) host or address of the request."
      }
    },
    "signals": {
      "child-added": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when a new object has been added."
      },
      "child-removed": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when an object was removed."
      }
    },
    "children": [
      "webrtc",
      "recordings",
      "calibrate",
      "rudimentary",
      "recorder",
      "upgrade",
      "network",
      "neighborhood",
      "system"
    ]
  },
  "/calibrate": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      }
    },
    "actions": {
      "emit-markers": {
        "return": "boolean",
        "args": [],
        "help": "Emit markers for 3 seconds or until calibrated."
      },
      "run": {
        "return": "boolean",
        "args": [],
        "help": "Run a calibration."
      }
    },
    "signals": {
      "marker": {
        "args": [
          "real",
          "array",
          "array"
        ],
        "help": "Send out calibration markers when found.\nArguments are (timestamp, (x, y, z) 3D, (x, y) 2D normalized) position."
      }
    },
    "children": []
  },
  "/neighborhood": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      }
    },
    "actions": {},
    "signals": {
      "child-added": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when a new object has been added."
      },
      "child-removed": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when an object was removed."
      }
    },
    "children": [
      "wifi",
      "ethernet"
    ]
  },
  "/neighborhood/ethernet": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      }
    },
    "actions": {},
    "signals": {
      "child-added": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when a new object has been added."
      },
      "child-removed": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when an object was removed."
      }
    },
    "children": [
      "TG03B-080200004381"
    ]
  },
  "/neighborhood/ethernet/<SerialNumber>": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      },
      "domain": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The domain registered for this host."
      },
      "ipv4": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "Host is registered with IPv4."
      },
      "ipv6": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "Host is registered with IPv6."
      },
      "port": {
        "type": "int",
        "range": [
          0,
          65535
        ],
        "mode": "r",
        "help": "The port registered for this host."
      },
      "hostname": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The hostname registered for this host."
      }
    },
    "actions": {},
    "signals": {},
    "children": []
  },
  "/neighborhood/wifi": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      }
    },
    "actions": {},
    "signals": {
      "child-added": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when a new object has been added."
      },
      "child-removed": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when an object was removed."
      }
    },
    "children": [
      "TG03B-080200004381"
    ]
  },
  "/neighborhood/wifi/<SerialNumber>": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      },
      "domain": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The domain registered for this host."
      },
      "ipv4": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "Host is registered with IPv4."
      },
      "ipv6": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "Host is registered with IPv6."
      },
      "port": {
        "type": "int",
        "range": [
          0,
          65535
        ],
        "mode": "r",
        "help": "The port registered for this host."
      },
      "hostname": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The hostname registered for this host."
      }
    },
    "actions": {},
    "signals": {},
    "children": []
  },
  "/network": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      },
      "wifi-enable": {
        "type": "boolean",
        "range": [
          false,
          true
        ],
        "mode": "rw",
        "help": "Enable or disable Wi-Fi networking."
      },
      "wifi-hw-enabled": {
        "type": "boolean",
        "range": [
          false,
          true
        ],
        "mode": "r",
        "help": "Check the state of the Wi-Fi hardware."
      }
    },
    "actions": {
      "reset": {
        "return": null,
        "args": [],
        "help": "Reset the whole network setup."
      }
    },
    "signals": {
      "child-added": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when a new object has been added."
      },
      "child-removed": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when an object was removed."
      }
    },
    "children": [
      "wifi",
      "ethernet"
    ]
  },
  "/network/ethernet": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      },
      "state": {
        "type": "enum",
        "range": [
          "unknown",
          "disconnected",
          "config",
          "auth",
          "ip-config",
          "connected",
          "disconnecting",
          "failed"
        ],
        "mode": "r",
        "help": "The current state of the device."
      },
      "state-reason": {
        "type": "enum",
        "range": [
          "unknown",
          "none",
          "config-fail",
          "auth-fail",
          "dhcp-fail",
          "config-ip-fail",
          "connection-removed",
          "user-request",
          "carrier",
          "access-point-fail"
        ],
        "mode": "r",
        "help": "The reason for the current state of the device."
      },
      "type": {
        "type": "enum",
        "range": [
          "unknown",
          "ethernet",
          "wifi"
        ],
        "mode": "r",
        "help": "The network device type."
      },
      "mac-address": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The network device MAC address."
      },
      "speed": {
        "type": "int",
        "range": [
          0,
          4294967295
        ],
        "mode": "r",
        "help": "The current network speed (kbit/s)."
      },
      "auto-connect": {
        "type": "boolean",
        "range": [
          false,
          true
        ],
        "mode": "rw",
        "help": "If automatic activation should be performed."
      },
      "active-configuration": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The UUID of the active configuration, null if not active."
      },
      "connected-network": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the current network."
      },
      "ipv4-address": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The current IPv4 Address."
      },
      "ipv4-gateway": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The current IPv4 Gateway."
      },
      "ipv4-name-servers": {
        "type": "array",
        "range": [],
        "mode": "r",
        "help": "The current IPv4 name servers."
      },
      "ipv6-address": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The current IPv6 Address."
      },
      "ipv6-gateway": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The current IPv6 gateway."
      },
      "ipv6-name-servers": {
        "type": "array",
        "range": [],
        "mode": "r",
        "help": "The current IPv6 name servers."
      }
    },
    "actions": {
      "create-config": {
        "return": "string",
        "args": [
          "string"
        ],
        "help": "Create a configuration for this device.\nArgument1: The name of the configuration.\nReturn: The UUID of the new configuration, null on error."
      },
      "connect": {
        "return": "boolean",
        "args": [
          "string"
        ],
        "help": "Connect device using specific configuration.\nArgument1: UUID of the configuration to use.\nReturn: true on success, false otherwise."
      },
      "disconnect": {
        "return": null,
        "args": [],
        "help": "Disconnect device."
      }
    },
    "signals": {
      "connected": {
        "args": [],
        "help": "Emitted when the active connection changes (connection, disconnection)."
      },
      "state-change": {
        "args": [
          "enum",
          "enum"
        ],
        "help": "Emitted when the network device state is changed.\nArgument1: The new state of the device."
      },
      "child-added": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when a new object has been added."
      },
      "child-removed": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when an object was removed."
      }
    },
    "children": [
      "configurations"
    ]
  },
  "/network/ethernet/configurations": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      }
    },
    "actions": {},
    "signals": {
      "child-added": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when a new object has been added."
      },
      "child-removed": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when an object was removed."
      }
    },
    "children": [
      "3e69755c-d744-406f-8356-332975e4b315"
    ]
  },
  "/network/ethernet/configurations/<UUID>": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      },
      "default": {
        "type": "boolean",
        "range": [
          false,
          true
        ],
        "mode": "r",
        "help": "If the configuration is the default ethernet read-only configuration."
      },
      "id": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "The network connection name."
      },
      "autoconnect": {
        "type": "boolean",
        "range": [
          false,
          true
        ],
        "mode": "rw",
        "help": "Autoconnect to this configuration."
      },
      "ipv4-method": {
        "type": "enum",
        "range": [
          "manual",
          "dhcp",
          "disable"
        ],
        "mode": "rw",
        "help": "IPv4 connection method."
      },
      "ipv4-address": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "IPv4 address."
      },
      "ipv4-gateway": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "IPv4 gateway."
      },
      "ipv4-name-servers": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "IPv4 DNS"
      },
      "ipv6-method": {
        "type": "enum",
        "range": [
          "manual",
          "automatic",
          "dhcp",
          "link-local",
          "ignore"
        ],
        "mode": "rw",
        "help": "IPv6 connection method."
      },
      "ipv6-address": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "IPv6 address."
      },
      "ipv6-gateway": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "IPv6 gateway."
      },
      "ipv6-name-servers": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "IPv6 DNS."
      }
    },
    "actions": {
      "save": {
        "return": "boolean",
        "args": [],
        "help": "Save any changed settings in the configuration.\nReturn: true if the changes were saved, false otherwise."
      },
      "restore": {
        "return": null,
        "args": [],
        "help": "Restore to current configuration.\nReturn: true if the changes were restored, false otherwise."
      },
      "delete": {
        "return": null,
        "args": [],
        "help": "Delete configuration."
      }
    },
    "signals": {},
    "children": []
  },
  "/network/wifi": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      },
      "state": {
        "type": "enum",
        "range": [
          "unknown",
          "disconnected",
          "config",
          "auth",
          "ip-config",
          "connected",
          "disconnecting",
          "failed"
        ],
        "mode": "r",
        "help": "The current state of the device."
      },
      "state-reason": {
        "type": "enum",
        "range": [
          "unknown",
          "none",
          "config-fail",
          "auth-fail",
          "dhcp-fail",
          "config-ip-fail",
          "connection-removed",
          "user-request",
          "carrier",
          "access-point-fail"
        ],
        "mode": "r",
        "help": "The reason for the current state of the device."
      },
      "type": {
        "type": "enum",
        "range": [
          "unknown",
          "ethernet",
          "wifi"
        ],
        "mode": "r",
        "help": "The network device type."
      },
      "mac-address": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The network device MAC address."
      },
      "speed": {
        "type": "int",
        "range": [
          0,
          4294967295
        ],
        "mode": "r",
        "help": "The current network speed (kbit/s)."
      },
      "auto-connect": {
        "type": "boolean",
        "range": [
          false,
          true
        ],
        "mode": "rw",
        "help": "If automatic activation should be performed."
      },
      "active-configuration": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The UUID of the active configuration, null if not active."
      },
      "connected-network": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the current network."
      },
      "ipv4-address": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The current IPv4 Address."
      },
      "ipv4-gateway": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The current IPv4 Gateway."
      },
      "ipv4-name-servers": {
        "type": "array",
        "range": [],
        "mode": "r",
        "help": "The current IPv4 name servers."
      },
      "ipv6-address": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The current IPv6 Address."
      },
      "ipv6-gateway": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The current IPv6 gateway."
      },
      "ipv6-name-servers": {
        "type": "array",
        "range": [],
        "mode": "r",
        "help": "The current IPv6 name servers."
      }
    },
    "actions": {
      "connect-network": {
        "return": "boolean",
        "args": [
          "string",
          "string"
        ],
        "help": "Connect to a Network, creating a new configuration if needed.\nArgument1: The UUID of the access point to connect to.\nArgument2: Passphrase to use for connection, null to reuse or for open networks.\nReturn: true if the connection succeeded, false otherwise."
      },
      "scan": {
        "return": "boolean",
        "args": [],
        "help": "Start a scan for Wi-Fi access points.\nReturn: true if scan was started, false otherwise."
      },
      "create-config": {
        "return": "string",
        "args": [
          "string"
        ],
        "help": "Create a configuration for this device.\nArgument1: The name of the configuration.\nReturn: The UUID of the new configuration, null on error."
      },
      "connect": {
        "return": "boolean",
        "args": [
          "string"
        ],
        "help": "Connect device using specific configuration.\nArgument1: UUID of the configuration to use.\nReturn: true on success, false otherwise."
      },
      "disconnect": {
        "return": null,
        "args": [],
        "help": "Disconnect device."
      }
    },
    "signals": {
      "connected": {
        "args": [],
        "help": "Emitted when the active connection changes (connection, disconnection)."
      },
      "state-change": {
        "args": [
          "enum",
          "enum"
        ],
        "help": "Emitted when the network device state is changed.\nArgument1: The new state of the device."
      },
      "child-added": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when a new object has been added."
      },
      "child-removed": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when an object was removed."
      }
    },
    "children": [
      "networks",
      "configurations"
    ]
  },
  "/network/wifi/configurations": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      }
    },
    "actions": {},
    "signals": {
      "child-added": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when a new object has been added."
      },
      "child-removed": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when an object was removed."
      }
    },
    "children": [
      "34053408-010c-479e-8c41-7bfa9fa97f52"
    ]
  },
  "/network/wifi/configurations/<UUID>": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      },
      "default": {
        "type": "boolean",
        "range": [
          false,
          true
        ],
        "mode": "r",
        "help": "If the configuration is the default ethernet read-only configuration."
      },
      "id": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "The network connection name."
      },
      "autoconnect": {
        "type": "boolean",
        "range": [
          false,
          true
        ],
        "mode": "rw",
        "help": "Autoconnect to this configuration."
      },
      "ipv4-method": {
        "type": "enum",
        "range": [
          "manual",
          "dhcp",
          "disable"
        ],
        "mode": "rw",
        "help": "IPv4 connection method."
      },
      "ipv4-address": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "IPv4 address."
      },
      "ipv4-gateway": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "IPv4 gateway."
      },
      "ipv4-name-servers": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "IPv4 DNS"
      },
      "ipv6-method": {
        "type": "enum",
        "range": [
          "manual",
          "automatic",
          "dhcp",
          "link-local",
          "ignore"
        ],
        "mode": "rw",
        "help": "IPv6 connection method."
      },
      "ipv6-address": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "IPv6 address."
      },
      "ipv6-gateway": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "IPv6 gateway."
      },
      "ipv6-name-servers": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "IPv6 DNS."
      },
      "access-point": {
        "type": "boolean",
        "range": [
          false,
          true
        ],
        "mode": "rw",
        "help": "If the network should act as an access point."
      },
      "ssid": {
        "type": "bytes",
        "range": [],
        "mode": "rw",
        "help": "The SSID of the configured network."
      },
      "ssid-name": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "The SSID of the configured network as a string."
      },
      "security": {
        "type": "enum",
        "range": [
          "open",
          "wpa-psk",
          "unknown"
        ],
        "mode": "rw",
        "help": "Configuration security."
      },
      "psk": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "Pre-Shared-Key of the network."
      }
    },
    "actions": {
      "save": {
        "return": "boolean",
        "args": [],
        "help": "Save any changed settings in the configuration.\nReturn: true if the changes were saved, false otherwise."
      },
      "restore": {
        "return": null,
        "args": [],
        "help": "Restore to current configuration.\nReturn: true if the changes were restored, false otherwise."
      },
      "delete": {
        "return": null,
        "args": [],
        "help": "Delete configuration."
      }
    },
    "signals": {},
    "children": []
  },
  "/network/wifi/networks": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      }
    },
    "actions": {},
    "signals": {
      "child-added": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when a new object has been added."
      },
      "child-removed": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when an object was removed."
      }
    },
    "children": [
      "8c6ea9d5-25e6-4d55-b20f-4826cc9aa6d9"
    ]
  },
  "/network/wifi/networks/<UUID>": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      },
      "ssid": {
        "type": "bytes",
        "range": [],
        "mode": "r",
        "help": "The SSID of the access point."
      },
      "ssid-name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "Parsed name of the SSID as a string."
      },
      "wifi-mode": {
        "type": "enum",
        "range": [
          "infrastructure",
          "access-point",
          "unknown"
        ],
        "mode": "r",
        "help": "Network Wi-Fi mode."
      },
      "max-bitrate": {
        "type": "int",
        "range": [
          0,
          4294967295
        ],
        "mode": "r",
        "help": "Max speed of the access point in kbit/s."
      },
      "strength": {
        "type": "int",
        "range": [
          0,
          100
        ],
        "mode": "r",
        "help": "The current strength in percent of the access point."
      },
      "security": {
        "type": "enum",
        "range": [
          "open",
          "wpa-psk",
          "unknown"
        ],
        "mode": "r",
        "help": "The access point security mode."
      }
    },
    "actions": {},
    "signals": {},
    "children": []
  },
  "/recorder": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      },
      "visible-name": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "The visible name of a new or ongoing recording."
      },
      "duration": {
        "type": "real",
        "range": [
          -1.0,
          1.7976931348623157E+308
        ],
        "mode": "r",
        "help": "The current duration of an ongoing recording."
      },
      "created": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The creation time of the recording."
      },
      "timezone": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The timezone at recording creation."
      },
      "folder": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "The name of the folder that holds the recording."
      },
      "gaze-samples": {
        "type": "int",
        "range": [
          -1,
          9223372036854775807
        ],
        "mode": "r",
        "help": "The total number of gaze samples in the recording (-1 if not found)."
      },
      "valid-gaze-samples": {
        "type": "int",
        "range": [
          -1,
          9223372036854775807
        ],
        "mode": "r",
        "help": "The number of valid gaze samples in the recording (-1 if not found)."
      },
      "uuid": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "Get the UUID of an ongoing recording (null if not ongoing)."
      },
      "remaining-time": {
        "type": "int",
        "range": [
          0,
          4294967295
        ],
        "mode": "r",
        "help": "The approximate number of seconds left for a recording."
      }
    },
    "actions": {
      "start": {
        "return": "boolean",
        "args": [],
        "help": "Create and start a new recording.\nIf action returns false, action-error is set.\nReturn: true if recording could be started, false otherwise."
      },
      "stop": {
        "return": "boolean",
        "args": [],
        "help": "Stop and save an ongoing recording.\nReturn: true if stopping succeeded, false otherwise."
      },
      "cancel": {
        "return": null,
        "args": [],
        "help": "Cancel and delete an ongoing recording.\nReturn: true if stopping succeeded, false otherwise."
      },
      "snapshot": {
        "return": "boolean",
        "args": [],
        "help": "Store a snapshot JPEG image of the current scene."
      },
      "send-event": {
        "return": "boolean",
        "args": [
          "string",
          "object"
        ],
        "help": "Send event to recording\nReturn true if event was sent, otherwise false"
      },
      "meta-insert": {
        "return": "boolean",
        "args": [
          "string",
          "bytes"
        ],
        "help": "Insert a key-value pair into the meta data.\nArgument1: Key string.\nArgument2: Value base64 data array, supply null to remove key.\nReturn: true if the key-value pair was inserted, false otherwise."
      },
      "meta-lookup": {
        "return": "bytes",
        "args": [
          "string"
        ],
        "help": "Get meta data in the specific key.\nArgument1: Key string.\nReturn: Base64 encoded string of data, null if not found."
      },
      "meta-keys": {
        "return": "array",
        "args": [],
        "help": "Get an array of available meta data keys.\nReturn: Array of key strings in the meta data."
      }
    },
    "signals": {
      "started": {
        "args": [
          "string"
        ],
        "help": "Signal emitted when a recording is started.\nArgument1: The UUID that is associated with the started recording."
      },
      "stopped": {
        "args": [
          "string"
        ],
        "help": "Signal emitted when a recording is completed.\nArgument1: The folder the recording was stored in, null on cancel or error."
      }
    },
    "children": []
  },
  "/recordings": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      }
    },
    "actions": {
      "delete": {
        "return": "boolean",
        "args": [
          "string"
        ],
        "help": "Delete recording by UUID.\nThis only marks the recording for deletion and removes it from the list of recordings, the recording is deleted when the last viewer has closed the connection to the recording (see deleted signal).\nArgument1: The UUID of the recording to delete.\nReturn: true if recording was marked for deletion, false otherwise."
      }
    },
    "signals": {
      "scan-done": {
        "args": [],
        "help": "Emitted at the end of a complete scan of the SD card.\nSee scan-start."
      },
      "scan-start": {
        "args": [],
        "help": "Emitted at start of a complete scan of the SD card.\nThis usually happens after the card has been inserted or during startup."
      },
      "deleted": {
        "args": [
          "string"
        ],
        "help": "Emitted when a recording has been deleted.\nRecordings are deleted when it has been marked for deletion by the delete action and the last viewer has closed the recording.\nArgument1: The UUID of the recording that was deleted"
      },
      "child-added": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when a new object has been added."
      },
      "child-removed": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when an object was removed."
      }
    },
    "children": []
  },
  "/rudimentary": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      },
      "scene-scale": {
        "type": "int",
        "range": [
          1,
          32
        ],
        "mode": "rw",
        "help": "The scale factor for scene camera images."
      },
      "scene-quality": {
        "type": "int",
        "range": [
          15,
          100
        ],
        "mode": "rw",
        "help": "The JPEG quality for scene camera images."
      },
      "gaze-sample": {
        "type": "object",
        "range": [],
        "mode": "r",
        "help": "Get the latest gaze sample."
      },
      "sync-port-sample": {
        "type": "object",
        "range": [],
        "mode": "r",
        "help": "Get the latest sync port sample."
      },
      "imu-sample": {
        "type": "object",
        "range": [],
        "mode": "r",
        "help": "Get the latest IMU sample."
      },
      "event-sample": {
        "type": "object",
        "range": [],
        "mode": "r",
        "help": "Get the latest event sample."
      }
    },
    "actions": {
      "keepalive": {
        "return": "boolean",
        "args": [],
        "help": "Start and keep a Rudimentary alive.\nEnsure signal emission for 5 seconds.\nReturn: true if signal emission will take place, false otherwise."
      },
      "send-event": {
        "return": "boolean",
        "args": [
          "string",
          "object"
        ],
        "help": "Send a event.\nArgument 1: Tag for the event\nArgument 2: Object with event message\nReturn: true on success, false otherwise"
      },
      "calibrate": {
        "return": "boolean",
        "args": [],
        "help": "Run a calibration.\nReturn: true if the calibration succeeded, false otherwise."
      }
    },
    "signals": {
      "event": {
        "args": [
          "real",
          "object"
        ],
        "help": "Emits event samples.\nArgument1: The timestamp in seconds.\nArgument2: The event sample."
      },
      "scene": {
        "args": [
          "real",
          "bytes"
        ],
        "help": "Emits down-scaled JPEG images from the scene camera.\nThis is a heavy task by the recording unit and will greatly reduce battery time and processing time for gaze data. Use only if absolutely needed.\nArgument1: Timestamp in seconds.\nArgument2: Base64 encoded JPEG image."
      },
      "gaze": {
        "args": [
          "real",
          "object"
        ],
        "help": "Emits gaze objects.\nArgument1: The timestamp in seconds.\nArgument2: The gaze object."
      },
      "sync-port": {
        "args": [
          "real",
          "object"
        ],
        "help": "Emits sync port events.\nArgument1: The timestamp in seconds.\nArgument2: The sync port event."
      },
      "imu": {
        "args": [
          "real",
          "object"
        ],
        "help": "Emits IMU samples.\nArgument1: The timestamp in seconds.\nArgument2: The IMU event."
      }
    },
    "children": []
  },
  "/system": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      },
      "version": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The current version of the recording unit firmware."
      },
      "recording-unit-serial": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The serial number of the recording unit (null if not detected)."
      },
      "head-unit-serial": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The serial number of the head unit."
      },
      "time": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The system time of the recording unit in ISO 8601 format."
      },
      "timezone": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The time zone of the recording unit."
      },
      "ntp-is-enabled": {
        "type": "boolean",
        "range": [
          false,
          true
        ],
        "mode": "r",
        "help": "true if NTP is enabled, false otherwise."
      },
      "ntp-is-synchronized": {
        "type": "boolean",
        "range": [
          false,
          true
        ],
        "mode": "r",
        "help": "true if the system clock is synchronized by NTP, false otherwise."
      }
    },
    "actions": {
      "set-time": {
        "return": "boolean",
        "args": [
          "string"
        ],
        "help": "Set the system time of the recording unit.\nArgument1: An ISO 8601 formatted time string.\nReturn: true if the system time was set, false otherwise."
      },
      "set-timezone": {
        "return": "boolean",
        "args": [
          "string"
        ],
        "help": "Set the system timezone of the recording unit.\nArgument1: A valid timezone string.\nReturn: true if the timezone was set, false otherwise."
      },
      "use-ntp": {
        "return": "boolean",
        "args": [
          "boolean"
        ],
        "help": "Set NTP synchronization on or off.\nArgument1: A boolean to switch NTP on or off.\nReturn: true if the NTP state was set, false otherwise."
      }
    },
    "signals": {
      "child-added": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when a new object has been added."
      },
      "child-removed": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when an object was removed."
      }
    },
    "children": [
      "battery",
      "storage"
    ]
  },
  "/system/battery": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      },
      "level": {
        "type": "real",
        "range": [
          0.0,
          1.0
        ],
        "mode": "r",
        "help": "The remaining battery level."
      },
      "remaining-time": {
        "type": "int",
        "range": [
          0,
          4294967295
        ],
        "mode": "r",
        "help": "The remaining battery time in seconds."
      },
      "charging": {
        "type": "boolean",
        "range": [
          false,
          true
        ],
        "mode": "r",
        "help": "The battery charging state."
      },
      "state": {
        "type": "enum",
        "range": [
          "full",
          "good",
          "low",
          "verylow",
          "unknown"
        ],
        "mode": "r",
        "help": "The state of the battery."
      }
    },
    "actions": {},
    "signals": {
      "state-changed": {
        "args": [
          "enum",
          "boolean"
        ],
        "help": "Signal emitted when the battery state has changed.\nArgument1: state.\nArgument2: charging."
      }
    },
    "children": []
  },
  "/system/storage": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      },
      "free": {
        "type": "int",
        "range": [
          0,
          9223372036854775807
        ],
        "mode": "r",
        "help": "The available free space in bytes of the inserted SD card."
      },
      "size": {
        "type": "int",
        "range": [
          0,
          9223372036854775807
        ],
        "mode": "r",
        "help": "The size in bytes of the inserted SD card."
      },
      "remaining-time": {
        "type": "int",
        "range": [
          0,
          4294967295
        ],
        "mode": "r",
        "help": "The approximate number of seconds until there is no space left on the SD card if the recording unit is recording."
      },
      "space-state": {
        "type": "enum",
        "range": [
          "good",
          "low",
          "verylow",
          "unknown"
        ],
        "mode": "r",
        "help": "Recording availability on the inserted SD card."
      },
      "card-state": {
        "type": "enum",
        "range": [
          "not-inserted",
          "not-available",
          "read-only",
          "available",
          "failure"
        ],
        "mode": "r",
        "help": "The detected partition of the inserted SD card."
      },
      "busy": {
        "type": "boolean",
        "range": [
          false,
          true
        ],
        "mode": "r",
        "help": "If true the recording unit is utilizing the SD card.\nUser may only remove the SD card when this property is false."
      }
    },
    "actions": {},
    "signals": {
      "state-changed": {
        "args": [
          "enum",
          "enum"
        ],
        "help": "Signal emitted after card or space state has changed.\nArgument1: space-state.\nArgument2: card-state."
      },
      "busy-changed": {
        "args": [
          "boolean"
        ],
        "help": "Signal emitted to indicate usage of the SD card.\nArgument1: busy."
      }
    },
    "children": []
  },
  "/upgrade": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      },
      "in-progress": {
        "type": "boolean",
        "range": [
          false,
          true
        ],
        "mode": "r",
        "help": "true if upgrade is in progress, false otherwise."
      }
    },
    "actions": {},
    "signals": {
      "progress": {
        "args": [
          "real",
          "real"
        ],
        "help": "Progress reporter for upgrade.\nArgument1: Upload progress.\nArgument2: Upgrade progress."
      },
      "completed": {
        "args": [
          "boolean"
        ],
        "help": "Upgrade completion signal.\nArgument1: true if upgrade succeeded, false otherwise."
      }
    },
    "children": []
  },
  "/webrtc": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      }
    },
    "actions": {
      "delete": {
        "return": "boolean",
        "args": [
          "string"
        ],
        "help": "Delete a WebRTC instance.\nReturn: true on success, false otherwise."
      },
      "create": {
        "return": "string",
        "args": [],
        "help": "Create a new WebRTC live instance.\nReturn: The UUID of the new live instance on success, null on failure."
      },
      "play": {
        "return": "string",
        "args": [
          "string"
        ],
        "help": "Create a new WebRTC replay instance.\nArgument1: The UUID of the recording to replay.\nReturn: The UUID of the new replay instance on success, null on failure."
      }
    },
    "signals": {
      "child-added": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when a new object has been added."
      },
      "child-removed": {
        "args": [
          "string"
        ],
        "help": "Signal is emitted when an object was removed."
      }
    },
    "children": [
      "6cf38e89-9529-4d53-a1cb-2e387bb2bdd4"
    ]
  },
  "/webrtc/<UUID>": {
    "properties": {
      "name": {
        "type": "string",
        "range": [],
        "mode": "r",
        "help": "The name of the object."
      },
      "turn-server": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "TURN server (turn(s)://username:password@host:port) to use."
      },
      "stun-server": {
        "type": "string",
        "range": [],
        "mode": "rw",
        "help": "STUN server (stun://hostname:port) to use."
      },
      "iframe-stream": {
        "type": "boolean",
        "range": [
          false,
          true
        ],
        "mode": "rw",
        "help": "If the supplied stream should only use iframes to lower bitrate."
      }
    },
    "actions": {
      "send-event": {
        "return": "boolean",
        "args": [
          "string",
          "object"
        ],
        "help": "Send an event to the running WebRTC session.\nReturn: true if the event was sent, false otherwise."
      },
      "start": {
        "return": "boolean",
        "args": [
          "string"
        ],
        "help": "Start the WebRTC session using the supplied SDP offer from the client.\nArgument1: The client SDP to use for streaming.\nReturn: true if the session was started, false on error."
      },
      "keepalive": {
        "return": null,
        "args": [],
        "help": "Should be called with a set interval to keep the session alive.\nIf not called, the WebRTC session will timeout after 20 seconds."
      },
      "setup": {
        "return": "string",
        "args": [],
        "help": "Setup the WebRTC system and generate an SDP offer.\nReturn: A newly created offer for any client."
      },
      "add-ice-candidate": {
        "return": null,
        "args": [
          "int",
          "string"
        ],
        "help": "Add a remote ICE candidate to the session.\nArgument1: The ICE ID.\nArgument2: The ICE definition."
      },
      "get-ice-candidates": {
        "return": "array",
        "args": [],
        "help": "Returns the collected list of ICE candidates. The list is then cleared.\nThis option may be used instead of the \"new-ice-candidate\" signal."
      }
    },
    "signals": {
      "event": {
        "args": [
          "real",
          "object"
        ],
        "help": "Emitted on event messages.\nArgument1: The timestamp of the event.\nArgument2: A JSON object with event data."
      },
      "gaze": {
        "args": [
          "real",
          "object"
        ],
        "help": "Emitted on every new gaze point.\nArgument1: The timestamp of the gaze point.\nArgument2: A JSON object with gaze data."
      },
      "sync-port": {
        "args": [
          "real",
          "object"
        ],
        "help": "Emitted on sync port events.\nArgument1: The timestamp of the event.\nArgument2: A JSON object with sync port event data."
      },
      "imu": {
        "args": [
          "real",
          "object"
        ],
        "help": "Emitted on IMU updates.\nNote; these come in chunks.\nArgument1: The timestamp of the event.\nArgument2: A JSON object with sync port event data."
      },
      "timed-out": {
        "args": [],
        "help": "Emitted once the WebRTC session has timed out."
      },
      "new-ice-candidate": {
        "args": [
          "int",
          "string"
        ],
        "help": "Emitted on new ICE candidates."
      }
    },
    "children": []
  }
}